# -*- coding: utf-8 -*-
"""review_sentiment.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IuB6WOmrVxvNb_D-8R2M2ie5Ut7QvqMJ
"""

!pip install requests --quiet
!pip install beautifulsoup4  --quiet
!pip install transformers --quiet
!pip install openai --quiet

import requests
from bs4 import BeautifulSoup
import pandas as pd

import openai
import math
import seaborn as sns
import matplotlib.pyplot as plt
from transformers import pipeline

import nltk
import re
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import SnowballStemmer
nltk.download('stopwords')
nltk.download('punkt')


from transformers import BartTokenizer, BartForConditionalGeneration
openai.api_key = ""

def get_reviews(url):
    user_agent = ({'User-Agent':
			'Mozilla/5.0 (Windows NT 10.0; Win64; x64) \
			AppleWebKit/537.36 (KHTML, like Gecko) \
			Chrome/90.0.4430.212 Safari/537.36',
			'Accept-Language': 'en-US, en;q=0.5'})
    page = requests.get(url, headers = user_agent)
    soup = BeautifulSoup(page.text, 'html.parser')

    reviews = []
    for review in soup.find_all('div', class_='review-container'):
        rating = review.find('span', class_='ui_bubble_rating')['class'][1].split('_')[-1]
        #title = review.find('div', class_='quote').text.strip()
        content = review.find('div', class_='entry').find('p').text.strip()
        #date = review.find('span', class_='ratingDate')['title']
        reviews.append({
            'rating': rating,
            #'title': title,
            'content': content,
            #'date': date
        })
    next_page_link = soup.find('a', class_='nav next ui_button primary')
    if next_page_link:
        next_page_url = 'https://www.tripadvisor.com' + next_page_link['href']
        # Recursively call the function to get reviews from the next page
        reviews += get_reviews(next_page_url)    
    return reviews

reviews=get_reviews("https://www.tripadvisor.com/Restaurant_Review-g294207-d17847946-Reviews-INTI_A_Nikkei_Experience-Nairobi.html")

def create_dataframe(data):
    df = pd.DataFrame(data, columns=['rating', 'content'])
    df['rating'] = df['rating'].astype(int) / 10
    return df.rename(columns={'content': 'review'})

reviews_df=create_dataframe(reviews)
reviews_df.info()

def preprocess_text(text):
    # Lowercase the text
    text = text.lower()

    # Remove punctuation and special characters
    text = re.sub(r'[^\w\s]|[\d]', '', text)

    # Tokenize the text
    tokens = word_tokenize(text)
    # Join the tokens back into a string
    text = ' '.join(tokens)

    return text

reviews_df['review'] = reviews_df['review'].apply(preprocess_text)
reviews_df['review']

def sentiment_analysis(texts):
    # Load pre-trained sentiment analysis pipeline
    classifier = pipeline('sentiment-analysis')
    
    # Run sentiment analysis on input texts
    results = classifier(texts)
    
    return results

# Get sentiment predictions for reviews in DataFrame
sentiments = sentiment_analysis(reviews_df['review'].tolist())

# Add sentiment predictions to DataFrame
reviews_df['sentiment'] = [result['label'] for result in sentiments]
reviews_df['confidence'] = [result['score'] for result in sentiments]

# Get summary of sentiment predictions
summary = reviews_df['sentiment'].value_counts()

summary

reviews_df

# Count the number of reviews with each sentiment
summary = reviews_df['sentiment'].value_counts()

# Create a pie chart using seaborn
sns.set_style("whitegrid")
sns.color_palette("pastel")
plt.figure(figsize=(5,5))
plt.title('Sentiment of Reviews')
plt.pie(summary, labels=summary.index, autopct='%1.1f%%', startangle=90, colors=['#008080', '#E9967A'])
plt.axis('equal')

# Add legend
plt.legend(title="Sentiment", loc="center right", bbox_to_anchor=(1, 0, 0.5, 1))

# Show the chart
plt.show()

negative_reviews = reviews_df[reviews_df['sentiment']=='NEGATIVE']['review'].tolist()
def generate_summary(text_list):

    # Define prompt for GPT-3
    prompt = (f"I have text containing negative reviews: {text_list}. Can you summarize them?")
    
    # Use OpenAI's GPT-3 to generate solutions based on input text
    response = openai.Completion.create( model="text-davinci-003", prompt=prompt, max_tokens=500,temperature=0)
    
    # Extract the generated text from the API response
    solution = response.choices[0].text.strip()
    
    return solution

summary = generate_summary(negative_reviews)

summary

def generate_solution( text_list):

    # Define prompt for GPT-3
    prompt = (f"I have a variable containing negative reviews: {text_list}. Can you recommend a solution?")
    
    # Use OpenAI's GPT-3 to generate solutions based on input text
    response = openai.Completion.create( model="text-davinci-003", prompt=prompt, max_tokens=1024,temperature=0)
    
    # Extract the generated text from the API response
    solution = response.choices[0].text.strip()
    
    return solution

recommendation = generate_solution(summary)
recommendation

